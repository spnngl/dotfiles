"    ▗
" ▌ ▌▄ ▛▚▀▖▙▀▖▞▀▖
" ▐▐ ▐ ▌▐ ▌▌  ▌ ▖
"  ▘ ▀▘▘▝ ▘▘  ▝▀

" first things first
set nocompatible noerrorbells
let mapleader = "à"
filetype on

" tidy
set viminfo+=n~/.vim/viminfo

source $HOME/.vim/rc/remap.vim
source $HOME/.vim/rc/plugin.vim

" auto-complete c
set path=/usr/include,/usr/local/include,/usr/local/lib

" cscope
set cscopeprg=/usr/bin/cscope
set cscoperelative
set cscopetag
"set cst
set csto=0
set nocscopeverbose
set cscopequickfix=s-,c-,d-,i-,t-,e-

let s:cspfile = "cscope.out"
if filereadable(s:cspfile)
    exec "cscope add " . s:cspfile
endif

" divers
set modelines=0
set number                      " show line number
set ruler                       " show cursor position
set backspace=indent,eol,start  " powerful backspace
set showmode
set splitright splitbelow
set incsearch                   " shows the match while typing
set hlsearch                    " highlight found searches
set autoread                    " automatic read if changed file
set autowrite                   " automatic write befor :next, :make etc
set encoding=utf-8
set synmaxcol=256
set shell=/bin/mksh
set showcmd "showmatch
set wildmenu
set wildignore=*.pyc,*.o
set wildignore+=*.pdf,*.psd
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png,*.tiff
set history=2047
set hidden
set ttyfast
set lazyredraw

set fileformats=unix,dos,mac    " prefer Unix over Windows over OS 9 formats

" crypt
setlocal cm=blowfish2

" make vim to handle long lines nicely.
set wrap
set textwidth=79
set formatoptions=qrn1
"set colorcolumn=79
"hi ColorColumn ctermbg=lightgrey

" undo & backup & swap
set undofile undodir=~/.vim/undo undolevels=1000 "undoreload=1000
set nobackup nowritebackup backupdir=~/.vim/backup
set noswapfile

" good search
set ignorecase smartcase infercase

" indent options "
set tabstop=4 shiftwidth=4 expandtab
set shiftround
set autoindent
set smarttab

" completion
set complete=.,w,b,u,t,i
set completeopt=menuone,preview,longest

" folding "
"set foldmethod=indent
"set foldlevel=99
"nnoremap <space> za

" colors
colorscheme fahrenheit
syntax on

" (au)commands
aug wscleaning
    au!
    " remove trailing whitespaces
    au BufWritePre * silent! :%s/\s\+$//
    " remove eol blank line(s)
    au BufWritePre * silent! :%s#\($\n\s*\)\+\%$##
    " remove windows eol
    au BufWritePre * silent! :%s///g
aug end

" spelling check
aug spelling
    au!
    au filetype tex  :setlocal spell spelllang=en
    au filetype markdown :setlocal spell spelllang=en
    au filetype gitcommit  :setlocal spell spelllang=en
aug end

" pdb killer
"au FileType python au BufUnload,BufWritePre * %s/\<pdb.set_trace\>/\#pdb.set_trace/g
" <buffer> pdb.set_trace I#<esc>

aug divers
    au!
    " remember cursor position
    au BufReadPost *
       \ if line("'\"") > 0 && line("'\"") <= line("$") |
       \ exe "normal g`\"" |
       \ endif
aug end

aug cursorhighlight
    au!
    au WinLeave * set nocursorline nocursorcolumn
    au WinEnter * set cursorline cursorcolumn
aug end

aug filetypeGroup
    au!
    au BufNewFile,BufRead *.cls set filetype=tex
    au BufNewFile,BufRead *.cc set filetype=cpp
aug end

" remove ms eol
com! Nom :%s///g

" remove trailing white space
com! Nows :%s/\s\+$//

" remove blank lines
com! Nobl :g/^\s*$/d

onoremap in( :<c-u>normal! f(vi(<cr>
onoremap il( :<c-u>normal! F)vi(<cr>


nnoremap <leader>q :call QuickfixToggle()<cr>

let g:quickfix_is_open = 0
fu! QuickfixToggle()
    if g:quickfix_is_open
        cclose
        let g:quickfix_is_open = 0
    else
        copen
        let g:quickfix_is_open = 1
    endif
endfu

aug markdown
    au!
    nnoremap <leader>p :call PreviewMd()<cr>

    fu! PreviewMd()
        "exe "silent !markdown % | lynx -stdin"
        exe "silent !markdown % | w3m -T text/html"
        "exe "silent !cat % | pandoc -f markdown_github | w3m -T text/html"
        exe "redraw!"
    endfu
aug end
